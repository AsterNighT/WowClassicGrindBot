@using System.Text
@using Core.GOAP
@using System.Text.RegularExpressions

<tr class="@ActionClass(this.IsSelected)">
    <td>
        <b style="color:@DisplayCanRun(goal.CheckIfActionCanRun())">@goal.CostOfPerformingAction: @goal.Description()</b>
    </td>
    <td>
        @foreach (var item in this.goal.State)
        {
            <span class="badge @Badge(item.Value)">@item.Key.ToStringF(this.goal.Preconditions.GetValueOrDefault(item.Key))</span>
        }
        @if (this.goal.Keys.Length == 1)
        {
            @foreach (var requirement in this.goal.Keys[0].RequirementObjects)
            {
                if (requirement.VisibleIfHasRequirement || !requirement.HasRequirement())
                {
                    @(DisplayRequirementBadges(requirement))
                }
            }
        }
    </td>
</tr>
@if (this.goal.Keys.Length > 1 && (this.IsSelected || this.Expand))
{
    <tr>
        <td colspan="2" style="padding-top: 0 !important; padding-bottom: 0 !important; border-top: 0 !important;">
            <table style="margin-left: 15px;">
                @{
                    int lastKeyClicked = Core.KeyAction.LastKeyClicked();
                }
                @for (int i = 0; i < this.goal.Keys.Length; i++)
                {
                    <tr class="@ActionClass(lastKeyClicked==this.goal.Keys[i].ConsoleKeyFormHash)">
                        <td>
                            <b style="color:@DisplayCanRun(this.goal.Keys[i].CanRun())">@this.goal.Keys[i].Name [@this.goal.Keys[i].ConsoleKey]</b>
                        </td>
                        <td>
                            @for (int j = 0; j < this.goal.Keys[i].RequirementObjects.Count; j++)
                            {
                                if (this.goal.Keys[i].RequirementObjects[j].VisibleIfHasRequirement || !this.goal.Keys[i].RequirementObjects[j].HasRequirement())
                                {
                                    @(DisplayRequirementBadges(this.goal.Keys[i].RequirementObjects[j]))
                                }
                            }
                        </td>
                    </tr>
                }
            </table>
        </td>
    </tr>
}

@code {

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public bool Expand { get; set; } = false;

    [Parameter]
    public Core.Goals.GoapGoal goal { get; set; } = new Core.Goals.NullGoal();

    private static readonly string and = " and ";
    private static readonly string or = " or ";
    private static readonly Regex regex = new($"({and})|({or})", RegexOptions.Compiled | RegexOptions.IgnoreCase);
    private static readonly StringBuilder stringBuilder = new();

    private static MarkupString DisplayRequirementBadges(Core.Requirement requirement)
    {
        stringBuilder.Clear();
        foreach (string match in regex.Split(requirement.LogMessage()))
        {
            if (match.StartsWith(and) || match.StartsWith(or))
            {
                stringBuilder.Append("<span class=\"badge badge-secondary\">");
                stringBuilder.Append(match.Trim());
                stringBuilder.Append("</span>\n");
            }
            else
            {
                stringBuilder.Append("<span class=\"badge ");
                stringBuilder.Append(Badge(requirement.HasRequirement()));
                stringBuilder.Append("\">");
                stringBuilder.Append(match.Trim());
                stringBuilder.Append("</span>\n");
            }
        }
        return new MarkupString(stringBuilder.ToString());
    }

    private static string Badge(bool value)
    {
        return value ? "badge-success" : "badge-danger";
    }

    private static string ActionClass(bool item)
    {
        return item ? "bg-majestic animate__animated animate__fadeIn" : "table-default";
    }

    private static string DisplayCanRun(bool item)
    {
        return item ? "black" : "gray";
    }
}