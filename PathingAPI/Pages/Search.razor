@page "/Search"

@using PPather
@using PPather.Data
@using PPather.Graph
@using System.Numerics

@inject IJSRuntime jsRuntime
@inject PPatherService pPatherService

<Watch PathColour="@pathColour" Name="@name" />

<span>
    <SearchParameters OnSearch="OnSearch" IsDisabled="@IsDisabled" />
</span>
@code {
    bool IsDisabled = true;

    PathGraph.eSearchScoreSpot searchType;
    int pathColour = 1;
    string name;
    SearchParam parameters;

    System.Threading.Thread searchPathThread;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await jsRuntime.InvokeVoidAsync("createScene");

            PathGraph.SearchEnabled = true;

            pPatherService.Reset();


            //var mapId = 1451;
            //this.parameters = new SearchParam
            //{
            //    From = pPatherService.GetWorldLocation(mapId, 46.8f, 54.2f),
            //    To = pPatherService.GetWorldLocation(mapId, 51.2f, 38.9f)
            //};

            //var mapId = 1428;
            //this.parameters = new SearchParam
            //{
            //    From= pPatherService.GetWorldLocation(mapId, 82.7f, 63.2f),
            //    To= pPatherService.GetWorldLocation(mapId, 64.9f, 27.0f)
            //};

            //DoSearch(PatherPath.Graph.PathGraph.eSearchScoreSpot.OriginalPather, 1, "Test");

            IsDisabled = false;
            await InvokeAsyncBase(StateHasChanged);
        }
    }

    public async Task InvokeAsyncBase(Action action)
    {
        await base.InvokeAsync(() =>
        {
            try { action(); } catch { }
        });
    }

    public async Task OnSearch(SearchParam searchParameters)
    {
        if (searchParameters.From == null || searchParameters.To == null)
        {
            return;
        }
        this.parameters = searchParameters;

        await DoSearch(parameters.SearchType, ((int)parameters.SearchType) + 1, parameters.SearchType.ToString());
    }

    private async Task DoSearch(PathGraph.eSearchScoreSpot searchType, int colour, string name)
    {
        IsDisabled = true;

        this.searchType = searchType;
        this.pathColour = colour;
        this.name = name;

        PathGraph.SearchEnabled = true;
        PathGraph.ProgressTimeoutSeconds = 60;
        PathGraph.TimeoutSeconds = 600;

        await InvokeAsyncBase(StateHasChanged);

        searchPathThread = new System.Threading.Thread(new System.Threading.ThreadStart(SearchPathThread));
        searchPathThread.Start();
    }

    public void SearchPathThread()
    {
        try
        {
            InvokeAsyncBase(() => jsRuntime.InvokeVoidAsync("removeMeshes", name)).Wait();
            InvokeAsyncBase(() => jsRuntime.InvokeVoidAsync("removeMeshes", "search")).Wait();


            var from = parameters.From;
            var to = parameters.To;

            pPatherService.SetLocations(from.Location, to.Location);

            var patherPath = pPatherService.DoSearch(searchType);

            InvokeAsyncBase(() => { IsDisabled = false; StateHasChanged(); }).Wait();
        }
        catch (Exception ex)
        {
            InvokeAsyncBase(() => jsRuntime.InvokeVoidAsync("log", ex.Message)).Wait();
        }
    }
}