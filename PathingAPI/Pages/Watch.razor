@page "/Watch"

@using System.Collections.Generic
@using PPather.Data
@using PPather.Graph
@using System.Threading
@using System.Numerics
@using SharedLib.Extensions

@implements IDisposable

@inject IJSRuntime jsRuntime
@inject PPatherService pPatherService

<div id="canvasText" style="position: relative; z-index: 2; left: 0px;padding-left:10px; top: 20px; height:30px; background-color: black;color:white">
    ...
</div>
<canvas id="renderCanvas" style="background:black">
</canvas>
@code {

    private bool initialised = false;
    private Thread RefreshSearchThread;
    private CancellationTokenSource cts;

    [Parameter]
    public int PathColour { get; set; } = 1;

    [Parameter]
    public string Name { get; set; } = "path";

    protected override void OnInitialized()
    {
        cts = new();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            PathingAPILoggerSink.OnLog += Log;
            await jsRuntime.InvokeVoidAsync("createScene");
            Initialise();
        }
    }

    private async void Initialise()
    {
        if (!pPatherService.HasInitialised)
        {
            await jsRuntime.InvokeVoidAsync("log", "Waiting for first search from the API...");
        }
        else
        {
            initialised = true;
            var chunks = pPatherService.SetNotifyChunkAdded(TriangleWorld_NotifyChunkAdded);
            this.AddChunks(chunks);

            pPatherService.SetOnPathCreated(DrawFinalPath);
            RefreshSearchThread = new Thread(SearchPathRefresh);
            RefreshSearchThread.Start();

            pPatherService.OnReset = Reset;
            pPatherService.OnLinesAdded = Drawlines;
            pPatherService.OnSphereAdded = DrawSphere;
        }
    }

    public async void Reset()
    {
        await jsRuntime.InvokeVoidAsync("clear");
    }

    public void Dispose()
    {
        PathingAPILoggerSink.OnLog -= Log;

        if (pPatherService != null) {
            pPatherService.OnReset = null;
            pPatherService.SetNotifyChunkAdded(null);
            pPatherService.SetOnPathCreated(null);

            pPatherService.OnLinesAdded = null;
            pPatherService.OnSphereAdded = null;
        }

        cts.Cancel();
    }

    public async void Log(object s, string message)
    {
        await jsRuntime.InvokeVoidAsync("log", message);
        if (!initialised) { Initialise(); }
    }

    public async void DrawFinalPath(PPather.Graph.Path spotPath)
    {
        if (spotPath != null)
        {
            var path = spotPath.locations.Select(s => Vertex.Create(s.X, s.Y, s.Z)).ToList();
            await jsRuntime.InvokeVoidAsync("removeMeshes", Name);
            await jsRuntime.InvokeVoidAsync("drawPath", path, PathColour, Name);

            //System.Threading.Thread.Sleep(1000);
            await jsRuntime.InvokeVoidAsync("removeMeshes", "search");
            await jsRuntime.InvokeVoidAsync("removeMeshes", "closest");
            await jsRuntime.InvokeVoidAsync("removeMeshes", "end");
        }
        else
        {
            Log(this, "No path found");
        }
    }

    private Vector3 lastFrom = new();
    private Vector3 lastTo = new();
    private Vector3 lastClosest = new();
    private Vector3 lastPeek = new();

    public async void SearchPathRefresh()
    {
        while (!cts.IsCancellationRequested)
        {
            if (PPather.Graph.PathGraph.SearchEnabled)
            {
                try
                {
                    var spots = pPatherService.GetCurrentSearchPath();
                    if (spots != null)
                    {
                        var path = spots.Where(s => s != null).Select(s => Vertex.Create(s.Loc.X, s.Loc.Y, s.Loc.Z));
                        if (path.Count() > 0)
                        {
                            await jsRuntime.InvokeVoidAsync("drawPath", path, 4, "search");
                        }
                    }

                    if (pPatherService.SearchFrom.HasValue && pPatherService.SearchTo.HasValue && lastFrom.X != pPatherService.SearchFrom.Value.X /*|| lastTo.X != lastTo.X*/)
                    {
                        Vector4 from = pPatherService.SearchFrom.Value;
                        Vector4 to = pPatherService.SearchTo.Value;

                        await jsRuntime.InvokeVoidAsync("drawLine", Vertex.Create(from.X, from.Y, from.Z), 2, "start2");
                        await jsRuntime.InvokeVoidAsync("drawLine", Vertex.Create(to.X, to.Y, to.Z), 3, "end");
                        lastFrom = from.AsVector3();
                        lastTo = to.AsVector3();
                    }

                    if (pPatherService.ClosestLocation.HasValue)
                    {
                        if (lastClosest.X != pPatherService.ClosestLocation.Value.X)
                        {
                            await jsRuntime.InvokeVoidAsync("drawLine", Vertex.Create(pPatherService.ClosestLocation.Value.X, pPatherService.ClosestLocation.Value.Y, pPatherService.ClosestLocation.Value.Z), 5, "closest");
                            lastClosest = pPatherService.ClosestLocation.Value;
                        }
                    }

                    if (pPatherService.PeekLocation.HasValue)
                    {
                        if (lastPeek.X != pPatherService.PeekLocation.Value.X)
                        {
                            await jsRuntime.InvokeVoidAsync("drawLine", Vertex.Create(pPatherService.PeekLocation.Value.X, pPatherService.PeekLocation.Value.Y, pPatherService.PeekLocation.Value.Z), 6, "peek");
                            lastPeek = pPatherService.PeekLocation.Value;
                        }
                    }

                }
                catch (Exception ex)
                {
                    Log(this, ex.Message);
                }
            }
            cts.Token.WaitHandle.WaitOne(50);
        }
    }

    private async void DrawSphere(SphereEventArgs e)
    {
        await jsRuntime.InvokeVoidAsync("drawSphere", e.Vertex, e.Colour, e.Name);
    }


    private async void Drawlines(LinesEventArgs e)
    {
        await jsRuntime.InvokeVoidAsync("drawPath", e.Lines, e.Colour, e.Name);
    }

    private void TriangleWorld_NotifyChunkAdded(WowTriangles.ChunkAddedEventArgs e)
    {
        var triangles = new List<WowTriangles.TriangleCollection> { e.Triangles };
        AddChunks(triangles);
    }

    private async void AddChunks(List<WowTriangles.TriangleCollection> chunks)
    {
        var positions = MeshFactory.CreatePointList(chunks);
        var water = MeshFactory.CreateTrianglesList(1, chunks);
        FixMaxWaterHeight(water, positions);
        var models = new List<int[]>();
        models.Add(MeshFactory.CreateTrianglesList(0, chunks));
        models.Add(water);
        models.Add(MeshFactory.CreateTrianglesList(2, chunks));
        models.Add(MeshFactory.CreateTrianglesList(4, chunks));

        await jsRuntime.InvokeVoidAsync("addModels", models, positions);
    }

    private void FixMaxWaterHeight(int[] waterPoints, Vertex[] positions)
    {
        var zlist = waterPoints.Select(pt => positions[pt].z).ToList();
        if (zlist.Count > 1)
        {
            var meanz = zlist[zlist.Count / 2];
            var minz = zlist.Min();
            waterPoints.ToList().ForEach(pt =>
            {
                if (positions[pt].z > minz) { positions[pt].z = minz; }
            });
        }
    }
}