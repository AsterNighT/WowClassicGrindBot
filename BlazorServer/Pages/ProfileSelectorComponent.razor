@using SharedLib
@inject Core.IBotController botController
@inject Core.IAddonReader addonReader
@implements IDisposable

<style>
    .form-group > * {
        margin-right: 4px;
    }
</style>

<div class="card @(Hide ? "hide" : "")" style="margin-top: 10px">
    <div class="card-header">
        <div class="form-inline">
            <div class="form-group">
                <button class="btn btn-sm btn-primary" @onclick="RefreshData">
                    <span class="glyphicon glyphicon-refresh"></span>
                </button>

                <label>Class Profile</label>

                <button class="btn btn-sm btn-primary" @onclick="LoadState">
                    <span>Init State</span>
                </button>

                <select name="listbox" class="form-control" id="listbox" @onchange="OnListBoxChanged" runat="server">
                    @foreach (var item in files)
                    {
                        <option value="@item" selected="@(selectedProfile == @item ? "selected" : null)">
                            @item
                        </option>
                    }
                </select>

                <button class="btn btn-sm btn-primary" @onclick="LoadClassProfile" disabled="@(disableButton ? "disabled" : null)">
                    <span>Load Profile</span>
                </button>

                <button class="btn btn-sm btn-primary" @onclick="SyncActionBar" disabled="@(string.IsNullOrEmpty(botController.SelectedClassFilename) ? "disabled" : null)">
                    <span>Populate Action bar</span>
                </button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public bool Hide { get; set; } = false;

    List<string> files = new List<string> { string.Empty };

    string selectedProfile = String.Empty;
    bool disableButton = true;

    protected override void OnInitialized()
    {
        if (DataFrameConfiguration.Exists())
        {
            RefreshData();

            addonReader.AddonDataChanged -= OnAddonDataChanged;
            addonReader.AddonDataChanged += OnAddonDataChanged;
        }
    }

    public void Dispose()
    {
        addonReader.AddonDataChanged -= OnAddonDataChanged;
    }

    public void OnGet()
    {
        RefreshData();
    }

    private void OnAddonDataChanged()
    {
        base.InvokeAsync(StateHasChanged);
    }

    private void LoadClassProfile()
    {
        if(!string.IsNullOrEmpty(selectedProfile)) {
            botController.LoadClassProfile(selectedProfile);
        }
    }

    private void LoadState()
    {
        addonReader.FullReset();

        var config = AddonConfig.Load();
        botController.ExecGameCommand.Run("/" + config.Command + "flush");
    }

    private void OnListBoxChanged(ChangeEventArgs changeEventArgs)
    {
        if(changeEventArgs.Value != null)
        {
            selectedProfile = (string)changeEventArgs.Value;
        }

        disableButton = string.IsNullOrEmpty(selectedProfile) || selectedProfile == files[0];
    }

    private void RefreshData()
    {
        files = botController.ClassFileList();
        selectedProfile = botController.SelectedClassFilename;
        disableButton = string.IsNullOrEmpty(selectedProfile);
    }

    private void SyncActionBar()
    {
        if (botController.ActionBarPopulator == null) return;
        botController.ActionBarPopulator.Execute();
    }

}