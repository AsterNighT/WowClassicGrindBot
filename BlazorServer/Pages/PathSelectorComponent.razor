@using MatBlazor
@using SharedLib; 
@inject Core.IBotController botController
@inject Core.IAddonReader addonReader
@implements IDisposable

<div class="card @(Hide ? "hide" : "")" style="margin-top: 10px">
    <div class="card-header">
        <button class="btn btn-sm btn-primary float-left" @onclick="RefreshData">
            <span class="glyphicon glyphicon-refresh"></span>
        </button>

        <label>Path Profile</label>

        <button class="btn btn-sm btn-primary float-right" @onclick="LoadPath" disabled="@(disableButton ? "disabled" : null)">
            <span>Load Path</span>
        </button>

        <MatAutocompleteList Items="@files" TItem="string" Label="Path" ValueChanged="OnSelectedPathChanged"
                             ShowClearButton="true" FullWidth="true" NumberOfElementsInPopup="@num" OnTextChanged="OnTextChanged">
            <ItemTemplate>
                <div class="mat-autocomplete-list-popup-element" style="display: flex; width: 100%;">
                    @context
                </div>
            </ItemTemplate>
        </MatAutocompleteList>
    </div>
</div>

@code {

    [Parameter]
    public bool Hide { get; set; } = false;

    List<string> files = new List<string> { string.Empty };

    public int num = 10;

    string selectedPath = String.Empty;
    bool disableButton = true;

    protected override void OnInitialized()
    {
        if (DataFrameConfiguration.Exists())
        {
            RefreshData();
            ValidateButton();

            botController.ProfileLoaded -= OnProfileLoaded;
            botController.ProfileLoaded += OnProfileLoaded;

            addonReader.AddonDataChanged -= OnAddonDataChanged;
            addonReader.AddonDataChanged += OnAddonDataChanged;
        }
    }

    public void Dispose()
    {
        addonReader.AddonDataChanged -= OnAddonDataChanged;
        botController.ProfileLoaded -= OnProfileLoaded;
    }

    public void OnGet()
    {
        RefreshData();
    }

    private void LoadPath()
    {
        botController.LoadPathProfile(selectedPath);
    }

    private void OnProfileLoaded(object? sender, EventArgs e)
    {
        ValidateButton();
    }

    private void OnAddonDataChanged(object? s, EventArgs e)
    {
        base.InvokeAsync(StateHasChanged);
    }

    private void ValidateButton()
    {
        disableButton = string.IsNullOrEmpty(botController.SelectedClassFilename);
    }

    private void RefreshData()
    {
        files = botController.PathFileList();
        selectedPath = botController.SelectedPathFilename ?? string.Empty;
    }


    private void OnSelectedPathChanged(string eventCallback)
    {
        selectedPath = eventCallback;
        if (string.IsNullOrEmpty(selectedPath) || selectedPath.Contains("Use Class Profile Default"))
        {
            selectedPath = string.Empty;
        }

        ValidateButton();
    }

    private void OnTextChanged(string text)
    {
        num = string.IsNullOrEmpty(text) ? 10 : 50;
    }

}