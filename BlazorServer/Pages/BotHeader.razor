@using Core;
@inject Core.IAddonReader addonReader
@inject Core.IBotController botController

<div class="card @(Hide ? "hide" : "")">
    <div class="card-header">
        Player <ToggleButton />
        <span class="float-right badge @CombatBadge()">@Core.GOAP.GoapKeyDescription.ToString(Core.GOAP.GoapKey.incombat, PlayerInCombat)</span>
    </div>
    <div class="card-body" style="padding-bottom: 0">
        <table class="table table-bordered">
            <tr>
                <th>Level @playerReader.Level.Value (XP: @((int)playerReader.PlayerXpPercentage)%)</th>
                <th>Bag Items:</th>
                <th>Health:</th>
                <th>Mana / Rage / Energy:</th>
                <th>Target:</th>
                <th>Actionbar:</th>
            </tr>
            <tr>
                <td>
                    Time to level: @levelTracker.TimeToLevel<br />
                    at @levelTracker.PredictedLevelUpTime.ToString("HH:mm:ss")
                </td>
                <td>@addonReader.BagReader.BagItems.Count / @addonReader.BagReader.SlotCount</td>
                <td>@playerReader.HealthPercent %</td>
                <td>@playerReader.PTCurrent (@playerReader.PTPercentage %) </td>
                <td>
                    @if (!string.IsNullOrEmpty(addonReader.TargetName))
                    {
                        <a href="https://tbc.wowhead.com/npc=@playerReader.TargetId" target="_blank">
                            <div>
                                @addonReader.TargetName<br/>
                                (@playerReader.TargetLevel) @((int)playerReader.TargetHealthPercentage) %<br/>
                                GUID: @playerReader.TargetGuid

                                @if (!playerReader.Bits.TargetIsNormal)
                                {
                                    <div>NOT NORMAL</div>
                                }
                                else if (playerReader.ComboPoints > 0)
                                {
                                    <div>Combo Points: @playerReader.ComboPoints</div>
                                }
                                @if (addonReader.CombatCreatureCount > 1)
                                {
                                    <div>Fighting @addonReader.CombatCreatureCount Mobs</div>
                                }

                            </div>
                        </a>
                    }
                    else
                    {
                        <div>Kills: @levelTracker.MobsKilled</div>
                    }
                </td>
                <td>@addonReader.ActionBarCostReader.Count</td>
            </tr>
        </table>

        @if (ShowActiveGoal)
        {
            <table class="table table-sm table-striped">
                @if (botController.GoapAgent != null && botController.GoapAgent.CurrentGoal != null)
                {
                    <GoapGoalView goal="botController.GoapAgent.CurrentGoal" IsSelected="true" />
                }
            </table>
        }
    </div>
</div>

@code {

    [Parameter]
    public bool Hide { get; set; } = false;

    [Parameter]
    public bool ShowActiveGoal { get; set; } = true;

    PlayerReader playerReader => addonReader.PlayerReader;
    LevelTracker levelTracker => addonReader.LevelTracker;

    public bool PlayerInCombat => this.playerReader.Bits.PlayerInCombat;

    public string CombatBadge()
    {
        return !PlayerInCombat ? "badge-success" : "badge-danger";
    }

    protected override void OnInitialized()
    {
        ((AddonReader)addonReader).AddonDataChanged += (o, e) =>
        {
            base.InvokeAsync(() => { try { StateHasChanged(); } catch { } });
        };
    }
}