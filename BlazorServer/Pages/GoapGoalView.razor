@using System.Text
@using Core.GOAP

<tr class="@ActionClass(this.IsSelected)">
    <td>
        <b style="color:@DisplayColour(goal.CheckIfActionCanRun())">@goal.CostOfPerformingAction: @goal.Description()</b>
    </td>
    <td>
        @foreach (var item in this.goal.State)
        {
            <span class="badge @Badge(item.Value)">@GoapKeyDescription.ToString(item.Key, this.goal.Preconditions.GetValueOrDefault(item.Key))</span>
        }
        @if (this.goal.Keys.Count == 1)
        {
            @foreach (var requirement in this.goal.Keys[0].RequirementObjects)
            {
                if (requirement.VisibleIfHasRequirement || !requirement.HasRequirement())
                {
                    @(DisplayRequirementBadges(requirement))
                }
            }
        }
    </td>
</tr>
@if (this.goal.Keys.Count > 1 && (this.IsSelected || this.Expand))
{
    <tr>
        <td colspan="2" style="padding-top: 0 !important; padding-bottom: 0 !important; border-top: 0 !important;">
            <table style="margin-left: 15px;">

                @if (this.goal.Keys != null)
                {
                    int lastKeyClicked = Core.KeyAction.LastKeyClicked();
                    foreach (var key in this.goal.Keys)
                    {
                        <tr class="@ActionClass(lastKeyClicked==key.ConsoleKeyFormHash)">
                            <td>
                                <b style="color:@DisplayColour(key.CanRun())">@key.Name [@key.ConsoleKey]</b>
                            </td>
                            <td>
                                @foreach (var requirement in key.RequirementObjects)
                                {
                                    if (requirement.VisibleIfHasRequirement || !requirement.HasRequirement())
                                    {
                                        @(DisplayRequirementBadges(requirement))
                                    }
                                }
                            </td>
                        </tr>
                    }
                }
            </table>
        </td>
    </tr>
}

@code {

    [Parameter]
    public bool IsSelected { get; set; }

    [Parameter]
    public bool Expand { get; set; } = false;

    [Parameter]
    public Core.Goals.GoapGoal goal { get; set; } = new Core.Goals.NullGoal();

    public string Badge(bool value)
    {
        return value ? "badge-success" : "badge-danger";
    }

    public string ActionClass(bool item)
    {
        if (item == true)
        {
            return "bg-majestic animate__animated animate__fadeIn";
        }

        return "table-default";
    }

    public string DisplayColour(bool item)
    {
        return item ? "black" : "gray";
    }


    private const string delAnd = " and ";
    private const string delOr = " or ";
    private string[] delimiters = new string[] { delAnd, delOr };
    private StringBuilder stringBuilder = new StringBuilder();
    private string[] split = new string[0];

    public MarkupString DisplayRequirementBadges(Core.Requirement requirement)
    {
        split = requirement.LogMessage().Split(delimiters, StringSplitOptions.None);
        if (split.Length > 1)
        {
            stringBuilder.Clear();
            string original = requirement.LogMessage();
            string badge = Badge(requirement.HasRequirement());

            foreach (var sub in split)
            {
                stringBuilder.AppendLine($"<span class=\"badge {badge}\">{sub}</span>");
                original = original[sub.Length..];

                if (original.StartsWith(delAnd))
                {
                    stringBuilder.AppendLine($"<span class=\"badge badge-secondary\">{delAnd.Trim()}</span>\n");
                    original = original[delAnd.Length..];
                }
                else if (original.StartsWith(delOr))
                {
                    stringBuilder.AppendLine($"<span class=\"badge badge-secondary\">{delOr.Trim()}</span>\n");
                    original = original[delOr.Length..];
                }
            }
            return new MarkupString(stringBuilder.ToString());
        }
        else
        {
            return new MarkupString($"<span class=\"badge {Badge(requirement.HasRequirement())}\">{requirement.LogMessage()}</span>\n");
        }
    }
}