@using System.Linq
@using Serilog.Events

<style>
    .log {
        font-family: "Courier New", Courier, monospace;
        font-size: small;
        padding: 0 0 5px 0 !important;
        padding-right: 10px !important;
    }

    .success {
        color: #28a745;
    }
    .info {
        color: #17a2b8;
    }
    .warning {
        color: #ffc107;
    }
    .danger {
        color: #dc3545;
    }
    .light {
        color: #f8f9fa;
    }
</style>

<table class="table table-borderless table-dark" cellspacing="20">
@foreach (var evt in LoggerSink.Log.Reverse())
{
    <tr class="@logLevelColor[evt.Level]">
        <td class="log">@evt.Timestamp.ToString("HH:mm:ss")</td>
        <td class="log">@evt.Message</td>
    </tr>
}
</table>

@code {

    private readonly Dictionary<LogEventLevel, string> logLevelColor =
        new Dictionary<LogEventLevel, string>
    {
        { LogEventLevel.Verbose, string.Empty },
        { LogEventLevel.Debug, "success" },
        { LogEventLevel.Information, string.Empty },
        { LogEventLevel.Warning, "warning" },
        { LogEventLevel.Error, "danger" },
        { LogEventLevel.Fatal, "danger" },
    };


    protected override void OnInitialized()
    {
        LoggerSink.OnLogChanged -= LogChanged;
        LoggerSink.OnLogChanged += LogChanged;
    }

    private async void LogChanged(object? sender, EventArgs args)
    {
        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public void Dispose()
    {
        LoggerSink.OnLogChanged -= LogChanged;
    }
}