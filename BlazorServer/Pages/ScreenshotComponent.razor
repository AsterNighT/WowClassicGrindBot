@inject Core.IBotController botController

<div class="@(Stretch ? "w-100 h-auto m-0 p-0" : "")">
    <div class="row" @onclick="Toggle">
        <img class="@(Stretch ? "img-fluid w-100" : "")" src="data:image/png;base64, @image" alt="dot" />
    </div>
</div>

@using Game;
@code {

    [Parameter]
    public int Size { get; set; } = 1024;

    [Parameter]
    public bool Stretch { get; set; } = false;

    private bool Enabled { get; set; } = true;

    const string defaultImage = "iVBORw0KGgoAAAANSUhEUgAAAA8AAAAPCAYAAAA71pVKAAAAGklEQVR42mM0NTH5z0AmYBzVPKp5VDOVNQMA2VMYNGMHmqcAAAAASUVORK5CYII=";

    string image = defaultImage;

    protected override void OnInitialized()
    {
        this.botController.WowScreen.Size = Size;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        // execute conditionally for loading data, otherwise this will load
        // every time the page refreshes
        if (firstRender)
        {
            this.botController.WowScreen.OnScreenChanged -= this.ImageChanged;
            this.botController.WowScreen.OnScreenChanged += this.ImageChanged;
        }
    }

    protected async void Toggle()
    {
        if (Enabled)
        {
            image = defaultImage;
        }

        this.botController.WowScreen.EnablePostProcess = !this.botController.WowScreen.EnablePostProcess;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    private async void ImageChanged(object sender, ScreenChangeEventArgs args)
    {
        if (!this.botController.WowScreen.EnablePostProcess)
            return;

        this.image = args.Screenshot;

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });
    }

    public void Dispose()
    {
        this.botController.WowScreen.OnScreenChanged -= this.ImageChanged;
    }
}