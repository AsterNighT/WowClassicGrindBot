@using Core
@inject Core.IBotController botController
@inject Core.IAddonReader addonReader
@implements IDisposable

@if (classConfig != null)
{
    <div class="container">
        <div class="card">
            <div class="card-header">
                Class Configuration
            </div>
            <div class="card-body" style="padding-bottom: 0">
                <table class="table table-bordered">
                    @foreach (var property in classConfig.GetType().GetProperties())
                    {
                        if (property.Name.Contains(nameof(classConfig.ClassName)) ||
                            property.Name.Contains(nameof(classConfig.PathFilename)) ||
                            property.Name.Contains(nameof(classConfig.OverridePathFilename))
                            )
                            continue;
                    <tr>         
                    
                        @switch (System.Type.GetTypeCode(property.PropertyType))
                        {
                            case TypeCode.String:
                                <td>@(property.Name)</td>
                                <td>
                                    <input value="@property.GetValue(classConfig)" class="form-control"
                                           @onchange="c => { property.SetValue(classConfig, c.Value); Update(); }" />
                                </td>
                                break;

                            case TypeCode.Int32:
                                <td>@(property.Name)</td>
                                <td>
                                    <input value="@property.GetValue(classConfig)" class="form-control"
                                           @onchange="c => { int n = System.Convert.ToInt32(c.Value); property.SetValue(classConfig, n); Update(); }" />
                                </td>
                                break;
                            case TypeCode.Boolean:
                                <td>@(property.Name)</td>
                                <td>
                                    <input type="checkbox" class="form-control" checked="@(CBool(property.GetValue(classConfig)))"
                                           @onchange="c => { property.SetValue(classConfig, c.Value); Update(); }" />
                                </td>
                                break;
                            default: 
                                <!--<input Text="@value?.ToString()" Disabled="true" />-->
                                break;
                        }
                    </tr>
                    }
                </table>
            </div>
        </div>
    </div>
}

@using SharedLib; 
@code {

    private ClassConfiguration? classConfig;

    protected override void OnInitialized()
    {
        if (DataFrameConfiguration.Exists())
        {
            RefreshData();

            botController.ProfileLoaded -= OnProfileLoaded;
            botController.ProfileLoaded += OnProfileLoaded;

            addonReader.AddonDataChanged -= OnAddonDataChanged;
            addonReader.AddonDataChanged += OnAddonDataChanged;
        }
    }

    public void Dispose()
    {
        addonReader.AddonDataChanged -= OnAddonDataChanged;
        botController.ProfileLoaded -= OnProfileLoaded;
    }

    private void OnAddonDataChanged()
    {
        base.InvokeAsync(StateHasChanged);
    }

    public void OnGet()
    {
        RefreshData();
    }

    private void OnProfileLoaded()
    {
        RefreshData();
    }

    private void RefreshData()
    {
        classConfig = botController.ClassConfig;
    }

    private void Update()
    {
        if(classConfig != null)
            botController.OverrideClassConfig(classConfig);
    }

    private bool CBool(object? o)
    {
        bool? b = (bool?)o;
        return b.HasValue && b.Value;
    }
}
