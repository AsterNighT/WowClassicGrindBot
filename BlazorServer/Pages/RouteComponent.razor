@inject Core.IAddonReader addonReader
@inject Core.IBotController botController
@inject IJSRuntime JSRuntime

@implements IDisposable

@using System.Linq
@using System.Numerics
@using System.Timers
@using System.Threading.Tasks
@using SharedLib

<div class="card">
    <div class="card-header">
        <table width="100%">
            <tr>
                <td>Route</td>
                <td>
                    <div class="float-right">
                        [@addonReader.PlayerReader.XCoord.ToString("00.0000"),@addonReader.PlayerReader.YCoord.ToString("00.0000")] @(AreaName) (@addonReader.UIMapId.Value)
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <div class="card-body">
        <div id="grid">
            <svg width="@(Size+2)px" height="@(Size+2)px" style="margin-top:0px">
                <g class="background">
                </g>
                <g class="group2">
                    @{
                        var colour = addonReader.PlayerReader.Bits.PlayerInCombat ? "red" : "orange";

                        if (botController.GoapAgent != null && botController.GoapAgent.CurrentGoal?.GetType() == typeof(Core.Goals.FollowRouteGoal))
                        {
                            colour = "blue";
                        }

                        @if (botController.RouteInfo != null)
                        {
                            <g id="playerloc" transform='translate(@(botController.RouteInfo.ToCanvasPointX(addonReader.PlayerReader.XCoord)-5), @(botController.RouteInfo.ToCanvasPointY(addonReader.PlayerReader.YCoord)-5)) rotate(@PlayerDir 5 5)'>
                                <svg width="10" height="10">
                                    <polygon points="5,0 8.5,8.5 1.5,8.5 5,0" fill="@colour" />
                                </svg>
                            </g>
                        }
                    }

                    <g stroke-width="1" stroke="lightgray">
                        @this.SpiritLines
                    </g>
                    <g fill="gray">
                        @this.SpiritPathPoints
                    </g>

                    <g stroke-width="1" stroke="gray">
                        @this.PathLines
                    </g>
                    <g fill="white">
                        @this.PathPoints
                    </g>

                    <g stroke-width="1" stroke="white">
                        @this.RouteToWaypointLines
                    </g>
                    <g fill="green">
                        @this.RouteToWaypointPoints
                    </g>

                    @if (botController.RouteInfo != null)
                    {
                        <g fill="blue">
                            @((MarkupString)botController.RouteInfo.RenderNextPoint())
                        </g>

                        <g>
                            @foreach (var death in this.deaths)
                            {
                                @((MarkupString)botController.RouteInfo.DeathImage(death))
                            }
                        </g>

                        <g>
                            @foreach (var poi in this.botController.RouteInfo.PoiList)
                            {
                                @((MarkupString)botController.RouteInfo.DrawPoi(poi))
                            }
                        </g>
                    }
                </g>
            </svg>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public int Size { get; set; } = 1024;

    public int margin = 10;

    private MarkupString RouteToWaypointLines = new MarkupString();
    private MarkupString RouteToWaypointPoints = new MarkupString();

    private MarkupString PathLines = new MarkupString();
    private MarkupString PathPoints = new MarkupString();

    private MarkupString SpiritLines = new MarkupString();
    private MarkupString SpiritPathPoints = new MarkupString();
    private Timer refreshTimer = new Timer();

    private float PlayerDir => -addonReader.PlayerReader.Direction * (180f / MathF.PI);

    private List<Vector3> deaths = new List<Vector3>();

    private string AreaName { get; set; } = string.Empty;


    protected override void OnInitialized()
    {
        botController.ProfileLoaded -= OnProfileLoaded;
        botController.ProfileLoaded += OnProfileLoaded;

        ((Core.AddonReader)addonReader).AddonDataChanged -= OnAddonDataChanged;
        ((Core.AddonReader)addonReader).AddonDataChanged += OnAddonDataChanged;

        ((Core.AddonReader)addonReader).ZoneChanged -= OnZoneChanged;
        ((Core.AddonReader)addonReader).ZoneChanged += OnZoneChanged;

        ((Core.AddonReader)addonReader).PlayerDeath -= OnPlayerDeath;
        ((Core.AddonReader)addonReader).PlayerDeath += OnPlayerDeath;

        UpdateZoneName();
        UpdateDeaths();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeAsync<string>("draw");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();

        botController.ProfileLoaded -= OnProfileLoaded;

        ((Core.AddonReader)addonReader).AddonDataChanged -= OnAddonDataChanged;
        ((Core.AddonReader)addonReader).ZoneChanged -= OnZoneChanged;
        ((Core.AddonReader)addonReader).PlayerDeath -= OnPlayerDeath;
    }


    private void Update()
    {
        if (botController.RouteInfo != null)
        {
            botController.RouteInfo.SetMargin(margin);
            botController.RouteInfo.SetCanvasSize(Size);

            RefreshPathMarkup();
        }
    }


    private void OnTimerTick(object? s, ElapsedEventArgs e)
    {
        if (botController.RouteInfo == null) return;
        botController.RouteInfo.CalculatePointToGrid();
        RefreshPathMarkup();
    }

    private void OnAddonDataChanged(object? s, EventArgs e)
    {
        base.InvokeAsync(() =>
        {
            try
            {
                Update();
                StateHasChanged();
            }
            catch { }
        });
    }

    private void OnZoneChanged(object? s, EventArgs e)
    {
        base.InvokeAsync(() =>
        {
            try
            {
                UpdateZoneName();
                StateHasChanged();
            }
            catch { }
        });
    }

    private void OnPlayerDeath(object? s, EventArgs e)
    {
        base.InvokeAsync(() =>
        {
            try
            {
                UpdateDeaths();
                StateHasChanged();
            }
            catch { }
        });
    }


    private void RefreshPathMarkup()
    {
        if (botController.RouteInfo == null) { return; }
        var routeinfo = botController.RouteInfo;

        this.PathLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.PathPoints));
        this.PathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.PathPoints));

        this.SpiritLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.SpiritPath));
        this.SpiritPathPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.SpiritPath));

        this.RouteToWaypointLines = new MarkupString(routeinfo.RenderPathLines(routeinfo.RouteToWaypoint));
        this.RouteToWaypointPoints = new MarkupString(routeinfo.RenderPathPoints(routeinfo.RouteToWaypoint));
    }

    private void OnProfileLoaded(object? sender, EventArgs e)
    {
        if (!refreshTimer.Enabled)
        {
            refreshTimer.Interval = 1000;
            refreshTimer.Enabled = true;

            refreshTimer.Elapsed -= OnTimerTick;
            refreshTimer.Elapsed += OnTimerTick;

            refreshTimer.Start();
        }
    }

    private void UpdateZoneName()
    {
        if (addonReader.WorldMapAreaDb.TryGet(addonReader.UIMapId.Value, out WorldMapArea wma))
        {
            AreaName = wma.AreaName;
        }
    }

    private void UpdateDeaths()
    {
        if (botController.GoapAgent != null)
        {
            var walkToCorpseGoal = botController.GoapAgent.AvailableGoals.FirstOrDefault(a => a.GetType() == typeof(Core.Goals.WalkToCorpseGoal)) as Core.Goals.WalkToCorpseGoal;
            if (walkToCorpseGoal != null)
            {
                deaths = walkToCorpseGoal.Deaths;
            }
        }
    }
}