@using SharedLib
@using Core 
@if (BagItem != null)
{
    <a href="@($"{WApi.ItemId}{BagItem.ItemId}")" target="_blank" data-wowhead="item=@BagItem.ItemId" class="small" style="text-decoration:none">
        <b>
            <span style="color:@BagItemColour(BagItem.Item)">
            @if (BagItem.WasRecentlyUpdated)
            {
                <span class="badge badge-info">@BagItem.LastChangeDescription</span>
            }
            @if (BagItem.Count > 1)
            {
                @BagItem.Count<span>&nbsp;</span>
            }
            @BagItem.Item.Name
            @if (BagItem.IsSoulbound)
            {
                <span>(S)</span>
            }
            @if (BagItem.Item.SellPrice > 0)
            {
                <Money Value="GetItemPrice(BagItem)" />
            }
            </span>
        </b>
    </a>
}
@code {

    [Parameter]
    public Core.BagItem? BagItem { get; set; }

    [Parameter]
    public bool ShowChangesPrice { get; set; } = false;

    List<string> itemColour = new List<string> { "grey", "white", "green", "blue", "purple", "yellow", "yellow", "yellow" };

    protected string BagItemColour(Item item)
    {
        if (item.Quality < 0 || item.Quality > 7) { return "black"; }
        return itemColour[item.Quality];
    }

    List<string> itemBadge = new List<string> { "badge-secondary", "badge-dark", "badge-success", "badge-primary", "badge-warning", "badge-warning", "badge-warning", "badge-warning" };

    protected string BagItemBadge(Item item)
    {
        if (item.Quality < 0 || item.Quality > 7) { return "badge-dark"; }
        return itemBadge[item.Quality];
    }

    protected int[] GetItemPrice(Core.BagItem item)
    {
        var value = item.Count * item.Item.SellPrice;
        if (ShowChangesPrice)
        {
            value = (item.LastChange == 0 ? item.Count : item.LastChange) * item.Item.SellPrice;
        }

        return Item.ToSellPrice(value);
    }
}