@page "/Swag"

@inject Core.IAddonReader addonReader
@inject Core.IBotController botController
@inject IJSRuntime JSRuntime;
@implements IDisposable
@using Core
@using SharedLib

<BotHeader />

<div class="card">
    <div class="card-header">
        Bag Contents
        <div class="float-right">
            <Money Value="vendMoney" />
        </div>
    </div>
    <div class="card-body" style="padding-bottom: 0">
        <table class="table table-sm table-striped table-no-border">
            <thead class="thead-dark">
                <tr>
                    @foreach(var bag in bagReader.Bags.Reverse())
                    {
                        <th>
                            <a href="@($"{WApi.ItemId}{bag.ItemId}")" target="_blank">@bag.Name</a>
                        </th>
                    }
                </tr>
            </thead>
            @for (int bagIndex = 0; bagIndex < maxSlot; bagIndex++)
            {
                <tr>
                    @for (int bag = 4; bag >= 0; bag--)
                    {
                        <td width="20%">
                            @{ var bagItem = bagReader.BagItems.Where(i => i.Bag == bag).Where(i => i.BagIndex == bagIndex).FirstOrDefault();}
                            @if (bagItem != null)
                            {
                                <BagItemComponent BagItem="bagItem" ShowIcon="true" />
                            }
                        </td>
                    }
                </tr>
            }
        </table>
    </div>
</div>

<div class="card">
    <div class="card-header">
        Equipments
    </div>
    <div class="card-body" style="padding-bottom: 0">
        @for (int index = 0; index <= (int)InventorySlotId.Bag_3; index++)
        {
            <a href="@($"{WApi.ItemId}{addonReader.EquipmentReader.GetId(index)}")" target="_blank">@((InventorySlotId)index)</a><br/>
        }
    </div>
</div>

<div id="tooltip" display="none" style="position: absolute; display: none;"></div>

@code {

    int[] vendMoney = new int[0];

    private BagReader bagReader = null!;

    private int maxSlot => bagReader.Bags.Max(b => b.SlotCount);

    protected override void OnInitialized()
    {
        bagReader = addonReader.BagReader;
        bagReader.DataChanged -= OnBagReaderDataChanged;
        bagReader.DataChanged += OnBagReaderDataChanged;
    }

    public void Dispose()
    {
        bagReader.DataChanged -= OnBagReaderDataChanged;
    }

    public void OnBagReaderDataChanged()
    {
        vendMoney = Item.ToSellPrice(bagReader.BagItems.Sum(s => s.Item.SellPrice * s.Count));
        base.InvokeAsync(StateHasChanged);
    }
}